
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 27 10:37:25 COT 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 27 10:37:25 COT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\006\000\002\003\007\000\002\003\007" +
    "\000\002\003\011\000\002\003\006\000\002\003\010\000" +
    "\002\003\011\000\002\003\007\000\002\003\011\000\002" +
    "\005\006\000\002\004\004\000\002\012\003\000\002\007" +
    "\004\000\002\013\003\000\002\021\003\000\002\010\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\014\004\006\005\007\006\010\007\011\010" +
    "\004\001\002\000\004\021\071\001\002\000\004\002\070" +
    "\001\002\000\004\014\053\001\002\000\004\016\016\001" +
    "\002\000\002\001\002\000\004\032\012\001\002\000\004" +
    "\016\016\001\002\000\004\016\016\001\002\000\010\016" +
    "\ufff3\024\ufff3\025\ufff3\001\002\000\002\001\002\000\002" +
    "\001\002\000\002\001\002\000\004\025\021\001\002\000" +
    "\004\002\ufffc\001\002\000\002\001\002\000\006\025\ufff0" +
    "\031\ufff0\001\002\000\004\025\030\001\002\000\004\031" +
    "\026\001\002\000\002\001\002\000\004\025\uffef\001\002" +
    "\000\004\002\ufffb\001\002\000\002\001\002\000\004\025" +
    "\033\001\002\000\004\002\ufffd\001\002\000\006\020\ufff1" +
    "\023\ufff1\001\002\000\004\020\036\001\002\000\002\001" +
    "\002\000\004\025\040\001\002\000\004\002\ufff7\001\002" +
    "\000\002\001\002\000\004\025\043\001\002\000\004\002" +
    "\ufff8\001\002\000\002\001\002\000\004\025\046\001\002" +
    "\000\004\002\ufffa\001\002\000\002\001\002\000\004\025" +
    "\051\001\002\000\004\002\ufff9\001\002\000\006\015\055" +
    "\023\056\001\002\000\002\001\002\000\006\015\ufff4\023" +
    "\ufff4\001\002\000\004\023\065\001\002\000\002\001\002" +
    "\000\004\025\060\001\002\000\004\002\ufffe\001\002\000" +
    "\004\024\062\001\002\000\004\015\055\001\002\000\004" +
    "\025\064\001\002\000\004\002\uffff\001\002\000\002\001" +
    "\002\000\004\024\067\001\002\000\004\025\ufff5\001\002" +
    "\000\004\002\001\001\002\000\002\001\002\000\004\023" +
    "\073\001\002\000\002\001\002\000\004\024\075\001\002" +
    "\000\004\025\076\001\002\000\004\002\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\051\001\001\000\004\007\043" +
    "\001\001\000\006\013\034\017\033\001\001\000\006\012" +
    "\012\020\013\001\001\000\004\007\030\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\004\011\017\001" +
    "\001\000\004\016\016\001\001\000\002\001\001\000\004" +
    "\006\021\001\001\000\002\001\001\000\010\010\023\021" +
    "\024\022\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\026\022\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\036\020\013\001\001\000\004" +
    "\006\040\001\001\000\002\001\001\000\010\010\041\021" +
    "\024\022\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\044\001\001\000\004\006\046\001\001\000" +
    "\002\001\001\000\010\010\047\021\024\022\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\056\001" +
    "\001\000\004\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\060\020\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\071\017\033\001\001\000\002\001" +
    "\001\000\006\012\073\020\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public int cont =0;

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public static int valor;

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDICIONES ::= COND Igual COND 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("=");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        parser.padre = (Nodo) nd;
        RESULT = nd;   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COND ::= DESCRIP 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("ATRIBUTO");
        nd.setIdNodo(parser.cont);
        String st = (String) n1;
        nd.setValor(st);
        parser.cont++;
        parser.padre = (Nodo) nd;
        RESULT = nd;   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TABLA_NODO ::= TABLA_NODO_NOMBRE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("TABLA");
        nd.setIdNodo(parser.cont);
        String st = (String) n1;
        nd.setValor(st);
        parser.cont++;
        parser.padre = (Nodo) nd;
        RESULT = nd;   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLA_NODO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLAUSULA_FROM ::= FROM TBL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("FROM");
        nd.setIdNodo(parser.cont);
        String st = (String) n1;
        nd.setValor(st);
        parser.cont++;
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLAUSULA_FROM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR ::= VAL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("COLS");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        String st = (String) n1;
        String []cols = st.split(",");
        for(String s:cols) {
            nd.setValor(s);
        };
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLAUSULA_INTO ::= INTO NOMBRE_TABLA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("INTO");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        String st = (String) n1;
        nd.setValor(st);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLAUSULA_INTO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLAUSULA_VALUES ::= VALUES Parentesis_a COLS Parentesis_c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("VALUES");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        String st = (String) n1;
        String []cols = st.split(",");
        for(String s:cols) {
            nd.setValor(s);
        };
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLAUSULA_VALUES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= CREATE TABLE TABLA_NODO Parentesis_a VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("CREATE");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= UPDATE TABLA_NODO SET VALOR P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("UPDATE");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= UPDATE TABLA_NODO SET VALOR CLAUSULA_WHERE CONDICIONES P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("UPDATE");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        nd.agregarHijos((Nodo) n3);
        nd.agregarHijos((Nodo) n4);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DELETE CLAUSULA_FROM TABLA CLAUSULA_WHERE CONDICIONES P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("DELETE");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n3);
        nd.agregarHijos((Nodo) n4);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DELETE CLAUSULA_FROM TABLA P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("DELETE");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SELECT VALOR CLAUSULA_FROM TABLA CLAUSULA_WHERE CONDICIONES P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("SELECT");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        nd.agregarHijos((Nodo) n4);
        nd.agregarHijos((Nodo) n5);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SELECT VALOR CLAUSULA_FROM TABLA P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("SELECT");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        parser.padre = (Nodo) nd;
        RESULT = nd;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SELECT Asterisco CLAUSULA_FROM TABLA P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("SELECT");
        nd.setIdNodo(parser.cont);
        parser.cont++;        
        nd.agregarHijos((Nodo) n1);
        parser.padre = (Nodo) nd;
        RESULT = nd;
 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= INSERT CLAUSULA_INTO CLAUSULA_VALUES P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("INSERT");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= INSERT CLAUSULA_INTO Parentesis_a VALOR Parentesis_c CLAUSULA_VALUES P_coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("INSERT");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        nd.agregarHijos((Nodo) n1);
        nd.agregarHijos((Nodo) n2);
        nd.agregarHijos((Nodo) n3);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // QUERY ::= SENTENCIA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("SENTENCIA");
        nd.setIdNodo(parser.cont);
        parser.cont++;
        nd.agregarHijos((Nodo) n1);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("QUERY",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SENTENCIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

