/* The following code was generated by JFlex 1.4.3 on 22/08/20 11:52 PM */


package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/08/20 11:52 PM from the specification file
 * <tt>src/lexico/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  6,  0,  0,  0,  0,  0, 39, 40, 38,  0,  3, 42,  0,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 41,  0, 37,  0,  0, 
     0, 26, 30, 27, 22, 19, 33, 31, 36, 17,  1,  1, 23, 34, 18, 29, 
    25,  1, 20, 15, 21, 24, 32, 35,  1,  1,  1,  0,  0,  0,  0, 28, 
     0, 11,  1, 13,  1,  1,  1, 16, 14,  7,  1,  1,  1,  1,  8,  1, 
     1,  1, 12,  1,  9,  1, 10,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\15\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\4\16\2\1\0"+
    "\1\13\2\2\1\14\3\2\1\15\10\2\1\0\4\2"+
    "\1\16\6\2\1\17\1\2\1\3\4\2\1\20\3\2"+
    "\1\21\1\2\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\11\2\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\53\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\53\0\53\0\u0331\0\53"+
    "\0\53\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\126\0\u060c\0\u0637\0\126\0\u0662\0\u068d\0\u06b8"+
    "\0\126\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\126\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\126\0\u0a14\0\53"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\126\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\126\0\u0b6c\0\126\0\u0b97\0\126\0\126\0\126\0\126"+
    "\0\126\0\u0bc2\0\126\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\2\3\1\11\4\3\1\12\1\3\1\13\1\3\1\14"+
    "\1\3\1\15\1\16\1\3\1\17\2\3\1\20\2\3"+
    "\1\21\1\3\1\22\1\23\1\3\1\24\1\3\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\54\0\2\3\4\0"+
    "\36\3\10\0\1\4\53\0\1\5\1\0\1\5\51\0"+
    "\1\32\47\0\2\3\4\0\1\3\1\33\34\3\7\0"+
    "\2\3\4\0\4\3\1\34\31\3\7\0\2\3\4\0"+
    "\2\3\1\35\11\3\1\36\21\3\7\0\2\3\4\0"+
    "\13\3\1\37\22\3\7\0\2\3\4\0\13\3\1\40"+
    "\22\3\7\0\2\3\4\0\23\3\1\41\12\3\7\0"+
    "\2\3\4\0\14\3\1\42\21\3\7\0\2\3\4\0"+
    "\22\3\1\43\13\3\7\0\2\3\4\0\15\3\1\44"+
    "\20\3\7\0\2\3\4\0\14\3\1\45\21\3\7\0"+
    "\2\3\4\0\23\3\1\46\12\3\7\0\2\3\4\0"+
    "\15\3\1\47\20\3\7\0\2\3\4\0\35\3\1\50"+
    "\60\0\1\51\5\32\1\0\45\32\1\0\2\3\4\0"+
    "\2\3\1\52\33\3\7\0\2\3\4\0\5\3\1\53"+
    "\30\3\7\0\2\3\4\0\5\3\1\54\30\3\7\0"+
    "\2\3\4\0\16\3\1\55\1\3\1\56\15\3\7\0"+
    "\2\3\4\0\10\3\1\57\5\3\1\60\17\3\7\0"+
    "\2\3\4\0\17\3\1\61\16\3\7\0\2\3\4\0"+
    "\27\3\1\62\6\3\7\0\2\3\4\0\20\3\1\63"+
    "\15\3\7\0\2\3\4\0\17\3\1\64\16\3\7\0"+
    "\2\3\4\0\14\3\1\65\21\3\7\0\2\3\4\0"+
    "\30\3\1\66\5\3\7\0\2\3\4\0\20\3\1\67"+
    "\15\3\7\0\2\3\4\0\26\3\1\70\7\3\7\0"+
    "\2\3\4\0\14\3\1\71\21\3\10\0\1\72\51\0"+
    "\2\3\4\0\6\3\1\73\27\3\7\0\2\3\4\0"+
    "\1\74\35\3\7\0\2\3\4\0\14\3\1\75\21\3"+
    "\7\0\2\3\4\0\14\3\1\76\21\3\7\0\2\3"+
    "\4\0\26\3\1\77\7\3\7\0\2\3\4\0\20\3"+
    "\1\100\15\3\7\0\2\3\4\0\14\3\1\101\21\3"+
    "\7\0\2\3\4\0\23\3\1\102\12\3\7\0\2\3"+
    "\4\0\23\3\1\103\12\3\7\0\2\3\4\0\12\3"+
    "\1\104\23\3\7\0\2\3\4\0\21\3\1\105\14\3"+
    "\7\0\2\3\4\0\33\3\1\106\2\3\7\0\2\3"+
    "\4\0\15\3\1\107\20\3\10\0\1\72\45\0\1\110"+
    "\3\0\2\3\4\0\7\3\1\111\26\3\7\0\2\3"+
    "\4\0\1\3\1\112\34\3\7\0\2\3\4\0\24\3"+
    "\1\113\11\3\7\0\2\3\4\0\15\3\1\114\20\3"+
    "\7\0\2\3\4\0\14\3\1\115\21\3\7\0\2\3"+
    "\4\0\16\3\1\116\17\3\7\0\2\3\4\0\16\3"+
    "\1\117\17\3\7\0\2\3\4\0\16\3\1\120\17\3"+
    "\7\0\2\3\4\0\13\3\1\121\22\3\7\0\2\3"+
    "\4\0\14\3\1\122\21\3\7\0\2\3\4\0\14\3"+
    "\1\123\21\3\7\0\2\3\4\0\4\3\1\124\31\3"+
    "\7\0\2\3\4\0\11\3\1\125\24\3\7\0\2\3"+
    "\4\0\16\3\1\126\17\3\7\0\2\3\4\0\16\3"+
    "\1\127\17\3\7\0\2\3\4\0\14\3\1\130\21\3"+
    "\7\0\2\3\4\0\14\3\1\131\21\3\7\0\2\3"+
    "\4\0\14\3\1\132\21\3\7\0\2\3\4\0\10\3"+
    "\1\133\25\3\7\0\2\3\4\0\5\3\1\52\30\3"+
    "\7\0\2\3\4\0\25\3\1\134\10\3\7\0\2\3"+
    "\4\0\22\3\1\135\13\3\7\0\2\3\4\0\15\3"+
    "\1\136\20\3\7\0\2\3\4\0\26\3\1\137\7\3"+
    "\7\0\2\3\4\0\24\3\1\140\11\3\7\0\2\3"+
    "\4\0\14\3\1\141\21\3\7\0\2\3\4\0\17\3"+
    "\1\142\16\3\7\0\2\3\4\0\21\3\1\143\14\3"+
    "\7\0\2\3\4\0\15\3\1\144\20\3\7\0\2\3"+
    "\4\0\14\3\1\145\21\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\15\1\2\11\1\1\2\11"+
    "\17\1\1\0\20\1\1\0\15\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 27: break;
        case 5: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 28: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 29: break;
        case 8: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 30: break;
        case 21: 
          { return new Symbol(sym.INSERT, yychar, yyline, yytext());
          }
        case 31: break;
        case 14: 
          { return new Symbol(sym.INTO, yychar, yyline, yytext());
          }
        case 32: break;
        case 26: 
          { return new Symbol(sym.CREATE_PROCEDURE, yychar, yyline, yytext());
          }
        case 33: break;
        case 19: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 34: break;
        case 23: 
          { return new Symbol(sym.UPDATE, yychar, yyline, yytext());
          }
        case 35: break;
        case 12: 
          { return new Symbol(sym.SET, yychar, yyline, yytext());
          }
        case 36: break;
        case 17: 
          { return new Symbol(sym.BEGIN, yychar, yyline, yytext());
          }
        case 37: break;
        case 11: 
          { return new Symbol(sym.T_dato, yychar, yyline, yytext());
          }
        case 38: break;
        case 15: 
          { return new Symbol(sym.FROM, yychar, yyline, yytext());
          }
        case 39: break;
        case 25: 
          { return new Symbol(sym.VALUES, yychar, yyline, yytext());
          }
        case 40: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 41: break;
        case 16: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 42: break;
        case 7: 
          { return new Symbol(sym.Asterisco, yychar, yyline, yytext());
          }
        case 43: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 44: break;
        case 20: 
          { return new Symbol(sym.SELECT, yychar, yyline, yytext());
          }
        case 45: break;
        case 18: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 46: break;
        case 6: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 47: break;
        case 24: 
          { return new Symbol(sym.CREATE, yychar, yyline, yytext());
          }
        case 48: break;
        case 4: 
          { /*Ignore*/
          }
        case 49: break;
        case 9: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 50: break;
        case 13: 
          { return new Symbol(sym.END, yychar, yyline, yytext());
          }
        case 51: break;
        case 22: 
          { return new Symbol(sym.DELETE, yychar, yyline, yytext());
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
